name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: mech-evolve/package-lock.json
    
    - name: Install dependencies
      run: |
        cd mech-evolve
        npm ci
    
    - name: Run linting
      run: |
        cd mech-evolve
        npm run lint
    
    - name: Run type checking
      run: |
        cd mech-evolve
        npm run typecheck
    
    - name: Run unit tests
      run: |
        cd mech-evolve
        npm run test:unit
    
    - name: Generate coverage report
      run: |
        cd mech-evolve
        npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./mech-evolve/coverage
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: mech-evolve/package-lock.json
    
    - name: Install dependencies
      run: |
        cd mech-evolve
        npm ci
    
    - name: Run integration tests
      env:
        MONGODB_URI: mongodb://localhost:27017/mech-evolve-test
      run: |
        cd mech-evolve
        npm run test:integration
    
    - name: Run hook system tests
      run: |
        cd mech-evolve
        npm run test:scripts

  management-scripts-test:
    name: Management Scripts Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
    
    - name: Install git (for project ID detection)
      run: |
        sudo apt-get update
        sudo apt-get install -y git
    
    - name: Make scripts executable
      run: |
        chmod +x mech-evolve-manager
        chmod +x mech-evolve-update.sh
        chmod +x mech-evolve-uninstall.sh
    
    - name: Run management scripts tests
      run: |
        cd mech-evolve
        bash tests/integration/management-scripts.test.sh

  claude-formatter-test:
    name: Claude Agent Formatter Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: mech-evolve/package-lock.json
    
    - name: Install dependencies
      run: |
        cd mech-evolve
        npm ci
    
    - name: Build project
      run: |
        cd mech-evolve
        npm run build
    
    - name: Test agent formatting
      run: |
        cd mech-evolve
        npm run test tests/unit/claude-agent-formatter.test.ts
    
    - name: Validate generated agent configs
      run: |
        cd mech-evolve
        node -e "
        const { ClaudeAgentFormatter } = require('./dist/services/claude-agent-formatter');
        const formatter = new ClaudeAgentFormatter();
        const testAgent = {
          name: 'TestAgent',
          applicationId: 'test-app',
          role: 'Testing',
          purpose: 'Test purpose',
          tier: 1,
          triggers: ['test'],
          capabilities: ['testing']
        };
        const config = formatter.generateAgentsConfig([testAgent]);
        const parsed = JSON.parse(config);
        if (!parsed.agents || parsed.agents.length !== 1) {
          throw new Error('Agent config generation failed');
        }
        console.log('✓ Agent config generation successful');
        "

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: mech-evolve/package-lock.json
    
    - name: Install dependencies
      run: |
        cd mech-evolve
        npm ci
    
    - name: Run npm audit
      run: |
        cd mech-evolve
        npm audit --audit-level=high
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: mech-evolve/package-lock.json
    
    - name: Install dependencies
      run: |
        cd mech-evolve
        npm ci
    
    - name: Build project
      run: |
        cd mech-evolve
        npm run build
    
    - name: Check build output
      run: |
        cd mech-evolve
        test -f dist/index.js
        test -f dist/services/agent-factory.js
        test -f dist/services/claude-agent-formatter.js
        echo "✓ Build artifacts verified"
    
    - name: Test start command
      run: |
        cd mech-evolve
        timeout 5 npm start || true

  all-tests-pass:
    name: All Tests Pass
    needs: [unit-tests, integration-tests, management-scripts-test, claude-formatter-test, security-scan, build-test]
    runs-on: ubuntu-latest
    
    steps:
    - name: Summary
      run: |
        echo "✅ All tests passed successfully!"
        echo "Ready for deployment to evolve.mech.is"